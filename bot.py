from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram import Bot, Dispatcher, types
from datetime import datetime, timedelta
from typing import Tuple, Optional
import sqlite3
import logging
import asyncio
import random
import time
import pytz
import re

print(" \n                            –≥—É—Å—å –≥–µ–π")
API_TOKEN = "7543698934:AAHr7d5JQyX-BPJkkXu_h02Ba3o4HKV6uLI"
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('KOTBioWars.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    bio_experience INTEGER DEFAULT 1,
    bio_resources INTEGER DEFAULT 50,
    registration_date TEXT,
    last_infect_time TEXT,
    skill_level INTEGER DEFAULT 1,
    contagion INTEGER DEFAULT 1,
    immunity INTEGER DEFAULT 0,
    virus_skill INTEGER DEFAULT 1,
    lethality INTEGER DEFAULT 1,
    qualification INTEGER DEFAULT 1,
    pathogens INTEGER DEFAULT 4,
    max_pathogens INTEGER DEFAULT 4,
    pathogen_name TEXT DEFAULT "–∫–æ—Ç—è—á–∫–∞",
    lab_name TEXT DEFAULT NULL,
    fever_end_time TEXT DEFAULT NULL,
    fever_end_date TEXT DEFAULT NULL,
    is_banned INTEGER DEFAULT 0,
    banned_at TEXT DEFAULT NULL,
    unbanned_at TEXT DEFAULT NULL,
    banned_by INTEGER DEFAULT NULL,
    ban_reason TEXT DEFAULT NULL,
    ban_end_time TEXT DEFAULT NULL,
    next_pathogen_time TEXT
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS infections (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    attacker_id INTEGER,
    victim_id INTEGER,
    infection_time TEXT,
    lethality INTEGER,
    FOREIGN KEY(attacker_id) REFERENCES users(user_id),
    FOREIGN KEY(victim_id) REFERENCES users(user_id)
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS fallen_victims (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    victim_id INTEGER,
    fall_date TEXT,
    FOREIGN KEY(user_id) REFERENCES users(user_id),
    FOREIGN KEY(victim_id) REFERENCES users(user_id)
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS infected (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    victim_id INTEGER,
    infect_date TEXT,
    infect_end_date TEXT,
    victim_experience INTEGER,
    experience_gained INTEGER,
    FOREIGN KEY(user_id) REFERENCES users(user_id),
    FOREIGN KEY(victim_id) REFERENCES users(user_id))''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS pathogen_updates (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    reason TEXT,
    punishment_duration INTEGER,
    unpunished_at TEXT,
    timestamp TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS admins (
    user_id INTEGER PRIMARY KEY,
    admin_level INTEGER,
    added_by INTEGER,
    added_at TEXT
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS labs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    lab_name TEXT,
    reason TEXT,
    punishment_duration INTEGER,
    unpunished_at TEXT,
    timestamp TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
)
''')
conn.commit()

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

##################################
#–∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–≥–æ –ª–∏–±–æ –≤ —Ç–∞–±–ª–∏—Ü—É #

#def add_column_if_not_exists(table_name, column_name, column_type):
#    cursor.execute(f"PRAGMA table_info({table_name})")
#    columns = [column[1] for column in cursor.fetchall()]
    
#    if column_name not in columns:
#        cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN {column_name} {column_type}")

# –ø—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
#add_column_if_not_exists('users', 'banned_at', 'TEXT DEFAULT NULL')
#add_column_if_not_exists('users', 'unbanned_at', 'TEXT DEFAULT NULL')
#add_column_if_not_exists('users', 'banned_by', 'INTEGER DEFAULT NULL')
#add_column_if_not_exists('users', 'ban_reason', 'TEXT DEFAULT NULL')

#conn.commit()

##################################
last_premium_hour = -1

async def calculate_premium(user_id, cursor):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–º–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cursor.execute('''
        SELECT SUM(victim_experience) 
        FROM infected 
        WHERE user_id = ? AND 
        datetime(infect_end_date) > datetime('now')
    ''', (user_id,))
    total_exp = cursor.fetchone()[0]
    return total_exp if total_exp else 0

async def daily_premium(cursor, conn):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–¥–∞—á—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–µ–º–∏–∏"""
    now = datetime.now()
    current_time = now.strftime('%Y-%m-%d %H:%M:%S')

    # –í—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        SELECT DISTINCT user_id 
        FROM infected 
        WHERE datetime(infect_end_date) > datetime('now')
    ''')
    active_users = cursor.fetchall()

    for (user_id,) in active_users:
        premium_exp = await calculate_premium(user_id, cursor)

        if premium_exp > 0:
            bio_resources = int(premium_exp * 0.1)

            cursor.execute('''
                UPDATE users 
                SET bio_resources = bio_resources + ?
                WHERE user_id = ?
            ''', (bio_resources, user_id))

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞—Ä–∞–∂–µ–Ω–∏—è
    cursor.execute('''
        SELECT user_id, victim_id, victim_experience, infect_end_date 
        FROM infected 
        WHERE datetime(infect_end_date) <= datetime('now')
    ''')
    expired_infections = cursor.fetchall()

    for user_id, victim_id, victim_exp, end_date in expired_infections:
        cursor.execute('''
            INSERT INTO fallen_victims (user_id, victim_id, fall_date) 
            VALUES (?, ?, ?)
        ''', (user_id, victim_id, current_time))
        
        cursor.execute('''
            DELETE FROM infected 
            WHERE user_id = ? AND victim_id = ?
        ''', (user_id, victim_id))
        
    conn.commit()

async def schedule_premium(cursor, conn):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤—ã–¥–∞—á–∏ –ø—Ä–µ–º–∏–π, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É"""
    global last_premium_hour
    while True:
        now = datetime.utcnow() + timedelta(hours=3)  # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ –ú–°–ö (UTC+3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å 00:00 –∏–ª–∏ 12:00 –∏ –ø—Ä–µ–º–∏—è –µ—â–µ –Ω–µ –≤—ã–¥–∞–Ω–∞
        if now.hour in [0, 12] and now.minute == 0 and last_premium_hour != now.hour:
            logging.info(f"Starting premium distribution at {now}")
            try:
                await daily_premium(cursor, conn)
                logging.info(f"Premium distribution completed at {now}")
                last_premium_hour = now.hour  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–¥–∞—á–∏ –ø—Ä–µ–º–∏–∏
            except Exception as e:
                logging.error(f"Error during premium distribution: {e}")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã
        await asyncio.sleep(60)

@dp.message_handler(lambda message: message.text.lower() == "–∫–æ–≥–¥–∞ –µ–∂–∞?")
async def check_next_premium(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –±–∞–Ω
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()

    if not user_data:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω - –º–æ–ª—á–∞ –≤—ã—Ö–æ–¥–∏–º
    if user_data[1] == 1:
        return

    now = datetime.now()
    next_premium_hour = 12 if now.hour < 12 else 0
    next_premium_date = now.replace(hour=next_premium_hour, minute=0, second=0, microsecond=0)
    
    if now.hour >= 12:
        next_premium_date += timedelta(days=1)
    
    time_left = next_premium_date - now
    hours, remainder = divmod(time_left.total_seconds(), 3600)
    minutes, seconds = divmod(remainder, 60)
    
    await message.answer(
        f"‚è∞ –î–æ —Å–ª–µ–¥—É—é—â–µ–π –µ–∂–∏ –æ—Å—Ç–∞–ª–æ—Å—å:\n"
        f"üïê {int(hours)} —á–∞—Å–æ–≤, {int(minutes)} –º–∏–Ω—É—Ç\n"
        f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–µ–º–∏—è –≤: {next_premium_date.strftime('%Y-%m-%d %H:%M')}"
    )

@dp.message_handler(lambda message: message.text.lower() == "–º–æ–∏ –∂–µ—Ä—Ç–≤—ã")
async def show_my_infected(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –±–∞–Ω
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()

    if not user_data:
        await message.reply("üéÖ‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML")
        return

    if user_data[1] == 1:  # –ï—Å–ª–∏ –∑–∞–±–∞–Ω–µ–Ω - –º–æ–ª—á–∞ –≤—ã—Ö–æ–¥–∏–º
        return

    user_id = message.from_user.id
    
    cursor.execute('''
        WITH RankedInfections AS (
            SELECT 
                i.victim_id,
                COALESCE(u.lab_name, u.username, CAST(i.victim_id AS TEXT)) as victim_name,
                i.experience_gained,
                i.infect_date,
                ROW_NUMBER() OVER (PARTITION BY i.victim_id ORDER BY i.infect_date DESC) as rn
            FROM infected i
            LEFT JOIN users u ON i.victim_id = u.user_id
            WHERE i.user_id = ?
        )
        SELECT victim_id, victim_name, experience_gained
        FROM RankedInfections
        WHERE rn = 1
        ORDER BY infect_date DESC
        LIMIT 30
    ''', (user_id,))
    
    infections = cursor.fetchall()
    
    if not infections:
        await message.answer("üéÑ‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–∞–∂–µ–Ω–∏–π!")
        return

    response = "üéÖ‚ò£Ô∏è <b>–í–∞—à–∏ –∂–µ—Ä—Ç–≤—ã:</b>\n\n"
    total_exp = 0
    
    for idx, (victim_id, victim_name, exp_gained) in enumerate(infections, 1):
        response += f"{idx}. üéÅ <a href='tg://openmessage?user_id={victim_id}'>{victim_name}</a> | {exp_gained:,} –ø–æ–¥–∞—Ä–∫–æ–≤\n"
        total_exp += exp_gained
    
    response += f"\nüéâüíâ –°—É–º–º–∞—Ä–Ω—ã–π –æ–ø—ã—Ç: {total_exp:,}"
    
    await message.answer(response, parse_mode="HTML")

@dp.message_handler(lambda message: message.text.lower() == "/giveprem")
async def manual_premium(message: types.Message):
    # –î–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()

    if not user_data:
        await message.reply("üéÖ‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML")
        return

    if message.from_user.id not in [6832369115, 1291390143]:
        return
    try:
        await daily_premium()
        await message.answer("üéÖüéÑ –ü—Ä–µ–º–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–¥ —ë–ª–æ—á–∫—É! üéÅ‚úÖ")
    except Exception as e:
        logging.error(f"Error during manual premium distribution: {e}")
        await message.answer("üéÖ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–º–∏–∏.")

@dp.message_handler(lambda message: message.text.lower() == "–º–æ–∏ —Å–ª–µ—Ç–µ–≤—à–∏–µ")
async def show_fallen_victims(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –±–∞–Ω
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()

    if not user_data:
        await message.reply(
            "üéÑ‚ùå –û–π-–æ–π, –ø–æ—Ö–æ–∂–µ, –≤—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞—á–Ω–∏—Ç–µ —Å /start –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–µ—Ä–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏!",
            parse_mode="HTML")
        return

    if user_data[1] == 1:  # –ï—Å–ª–∏ –∑–∞–±–∞–Ω–µ–Ω - –º–æ–ª—á–∞ –≤—ã—Ö–æ–¥–∏–º
        return

    user_id = message.from_user.id
    
    cursor.execute('''
        WITH RankedFallen AS (
            SELECT 
                f.victim_id,
                COALESCE(u.lab_name, u.username, CAST(f.victim_id AS TEXT)) as victim_name,
                f.experience_gained,
                f.fall_date,
                ROW_NUMBER() OVER (PARTITION BY f.victim_id ORDER BY f.fall_date DESC) as rn
            FROM fallen_victims f
            LEFT JOIN users u ON f.victim_id = u.user_id
            WHERE f.user_id = ?
        )
        SELECT victim_id, victim_name, experience_gained, fall_date
        FROM RankedFallen
        WHERE rn = 1
        ORDER BY fall_date DESC
        LIMIT 30
    ''', (user_id,))
    
    fallen = cursor.fetchall()
    
    if not fallen:
        await message.answer(
            "üéÅ‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–µ—Ç–µ–≤—à–∏—Ö –∂–µ—Ä—Ç–≤",
            parse_mode="HTML")
        return

    response = "<b>üéÑ –í–∞—à–∏ —Å–ª–µ—Ç–µ–≤—à–∏–µ –∂–µ—Ä—Ç–≤—ã:</b>\n\n"
    total_gifts = 0
    
    for idx, (victim_id, victim_name, exp_gained, fall_date) in enumerate(fallen, 1):
        fall_datetime = datetime.strptime(fall_date, '%Y-%m-%d %H:%M:%S')
        response += f"{idx}. <a href='tg://openmessage?user_id={victim_id}'>{victim_name}</a> ‚Äî {exp_gained:,} –ø–æ–¥–∞—Ä–∫–æ–≤\n"
        total_gifts += exp_gained
    
    response += f"\nüéâ <b>–í—Å–µ–≥–æ —Å–ª–µ—Ç–µ–≤—à–∏—Ö –∂–µ—Ä—Ç–≤: </b> {total_gifts:,}\nüåü –ü—É—Å—Ç—å —ç—Ç–æ—Ç –ù–æ–≤—ã–π –ì–æ–¥ –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–º –µ—â—ë –±–æ–ª—å—à–µ –∂–µ—Ä—Ç–≤ –∏ —Ä–∞–¥–æ—Å—Ç–∏!"
    
    await message.answer(response, parse_mode="HTML")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register_user(user_id, username, first_name):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT is_banned FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()

    if user is not None and user[0] == 1:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–∞–±–∞–Ω–µ–Ω
        return  # –ú–æ–ª—á–∞ –≤—ã—Ö–æ–¥–∏–º

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()

    if user is None:
        registration_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute('''
            INSERT INTO users (
                user_id, 
                username, 
                registration_date, 
                is_banned,
                ban_reason,
                banned_at,
                ban_end_time,
                banned_by
            ) VALUES (?, ?, ?, 0, NULL, NULL, NULL, NULL)
        ''', (user_id, username, registration_date))
        conn.commit()
        await bot.send_message(
            user_id, 
            f"üéÅ‚ùÑÔ∏è {first_name}, –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ KOTBioWars! üåü\nüêæ –ò—Å–ø–æ–ª—å–∑—É–π <code>!–ø–æ–º–æ—â—å</code> –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º. –ë—É–¥—å –∑–¥–æ—Ä–æ–≤ –∏ —É–¥–∞—á–∏!", 
            parse_mode="HTML"
        )

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT is_banned FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()

    if user is not None and user[0] == 1:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–∞–±–∞–Ω–µ–Ω
        return  # –ú–æ–ª—á–∞ –≤—ã—Ö–æ–¥–∏–º
    
    await register_user(user_id, username, first_name)
    
    await message.answer(
        "üéÖ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç:\n\n"
        "<blockquote>üß£ ‚Ä¢ KOTBioWarsBot.t.me - —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞.\n"
        "üéÑ ‚Ä¢ channelkotbiowars.t.me - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª.\n"
        "‚ùÑÔ∏è ‚Ä¢ KOTBioWarsChat.t.me - —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç.</blockquote>", 
        parse_mode="HTML"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
def extract_user_from_command(message: types.Message) -> Tuple[Optional[int], Optional[str]]:
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–ø–ª–∞–π
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
        if cursor.fetchone():
            return user_id, None
        return None, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —Ä–µ–ø–ª–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    
    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    if not args:
        return None, None
        
    arg = args[0]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç - —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    link_pattern = r'https?://t.me/([a-zA-Z0-9_]+)'
    link_match = re.match(link_pattern, arg)
    if link_match:
        username = link_match.group(1)
        cursor.execute('SELECT user_id FROM users WHERE LOWER(username) = LOWER(?)', (username,))
        result = cursor.fetchone()
        if result:
            return result[0], None
        return None, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∏–∑ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç - —Å—Å—ã–ª–∫–∞ tg://openmessage?user_id=123456789
    tg_link_pattern = r'tg://openmessage\?user_id=(\d+)'
    tg_link_match = re.match(tg_link_pattern, arg)
    if tg_link_match:
        user_id = int(tg_link_match.group(1))
        cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        if result:
            return user_id, None
        return None, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç —Å @ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username)
    if arg.startswith('@'):
        username = arg[1:]  # –£–±–∏—Ä–∞–µ–º @
        cursor.execute('SELECT user_id FROM users WHERE LOWER(username) = LOWER(?)', (username,))
        result = cursor.fetchone()
        if result:
            return result[0], None
        return None, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—ã—á–Ω—ã–π username (–±–µ–∑ @)
    username = arg
    cursor.execute('SELECT user_id FROM users WHERE LOWER(username) = LOWER(?)', (username,))
    result = cursor.fetchone()
    if result:
        return result[0], None
    return None, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    return None, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username, username, —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å—Å—ã–ª–∫—É tg://openmessage?user_id."

@dp.message_handler(lambda message: message.text.lower().startswith("–∫—É—Å—å"))
async def infect_user(message: types.Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('SELECT user_id, is_banned, username, pathogens, pathogen_name, qualification FROM users WHERE user_id = ?', (message.from_user.id,))
        user_data = cursor.fetchone()

        if not user_data:
            await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return

        if user_data[1] == 1:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            await message.reply("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        pathogens = user_data[3]
        qualification = user_data[5]

        if pathogens <= 0:  # –ï—Å–ª–∏ –ø–∞—Ç–æ–≥–µ–Ω—ã –Ω–∞ –Ω—É–ª–µ
            recovery_time = max(30 - qualification * 2, 5)
            next_recovery = datetime.now() + timedelta(minutes=recovery_time)
            
            await message.reply(
                f"üéÑ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–∞—Ç–æ–≥–µ–Ω–æ–≤!\n"
                f"‚îú ‚è≥ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {recovery_time} –º–∏–Ω.\n"
                f"‚îî üéÖ –≠–ª—å—Ñ—ã —Å–∞–Ω—Ç—ã —É–∂–µ —É—Å–∫–æ—Ä—è—é—Ç –ø—Ä–æ—Ü–µ—Å—Å.",
                parse_mode="HTML"
            )
            return

        user_id = message.from_user.id
        pathogen_name = user_data[4] if user_data[4] else "–∫–æ—Ç—è—á–∫–∞"

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∂–µ—Ä—Ç–≤—É
        victim_id, error_message = extract_user_from_command(message)
        if error_message:
            await message.reply(error_message)
            return

        if not victim_id:  # –ï—Å–ª–∏ –∂–µ—Ä—Ç–≤–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("SELECT user_id FROM users WHERE user_id != ? AND is_banned = 0", (user_id,))
            victims = cursor.fetchall()
            if not victims:
                await message.reply("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞—Ä–∞–∂–µ–Ω–∏—è.")
                return
            victim_id = random.choice(victims)[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ä–∞–∑–∏—Ç—å —Å–∞–º —Å–µ–±—è
        if victim_id == user_id:
            await message.reply("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–∑–∏—Ç—å —Å–µ–±—è.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞—Ä–∞–∂–µ–Ω–∏—è
        cursor.execute("""
            SELECT infect_date FROM infected 
            WHERE user_id = ? AND victim_id = ? 
            ORDER BY infect_date DESC LIMIT 1
        """, (user_id, victim_id))
        last_infection = cursor.fetchone()

        cooldown_time = timedelta(hours=4)

        if last_infection:
            last_infection_time = datetime.strptime(last_infection[0], '%Y-%m-%d %H:%M:%S')
            time_since_infection = datetime.now() - last_infection_time
            if time_since_infection < cooldown_time:
                remaining_time = cooldown_time - time_since_infection
                hours = int(remaining_time.total_seconds() // 3600)
                minutes = int((remaining_time.total_seconds() % 3600) // 60)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–µ—Ä—Ç–≤–µ
                cursor.execute('SELECT lab_name FROM users WHERE user_id = ?', (victim_id,))
                victim_data = cursor.fetchone()
                
                if victim_data and victim_data[0]:  # –ï—Å–ª–∏ —É –∂–µ—Ä—Ç–≤—ã –µ—Å—Ç—å –∏–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
                    lab_name = victim_data[0]
                    await message.reply(
                        f'üéÑ ‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–π –∞—Ç–∞–∫–∏ <a href="tg://openmessage?user_id={victim_id}">{lab_name}</a> –æ—Å—Ç–∞–ª–æ—Å—å: <b>{hours} —á. {minutes} –º–∏–Ω.</b>',
                        parse_mode="HTML"
                    )
                else:  # –ï—Å–ª–∏ –∏–º–µ–Ω–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º
                    await message.reply(
                        f'üéÑ ‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–π –∞—Ç–∞–∫–∏ <a href="tg://openmessage?user_id={victim_id}">{victim_id}</a> –æ—Å—Ç–∞–ª–æ—Å—å: <b>{hours} —á. {minutes} –º–∏–Ω.</b>',
                        parse_mode="HTML"
                    )
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∏ –∂–µ—Ä—Ç–≤—ã
        cursor.execute("""
            SELECT bio_experience, contagion, pathogens, virus_skill, lethality 
            FROM users WHERE user_id = ?
        """, (user_id,))
        attacker_data = cursor.fetchone()

        cursor.execute("""
            SELECT bio_experience, immunity, username, user_id, lab_name 
            FROM users WHERE user_id = ?
        """, (victim_id,))
        victim_data = cursor.fetchone()

        if not victim_data:
            await message.reply("‚ùå –ñ–µ—Ä—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Ç–∞–∫–∏
        attacker_contagion = attacker_data[1]
        victim_immunity = victim_data[1]
        pathogens = attacker_data[2]
        virus_skill = attacker_data[3]
        lethality = attacker_data[4]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ –∂–µ—Ä—Ç–≤—ã
        if victim_immunity > attacker_contagion:
            victim_display_name = f"""<a href="tg://openmessage?user_id={victim_data[3]}">{victim_data[2]}</a>"""
            # –ò–∑–º–µ–Ω–µ–Ω–∏—è: –µ—Å–ª–∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫, –ø–∞—Ç–æ–≥–µ–Ω –≤—Å–µ —Ä–∞–≤–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—Å—è
            new_pathogens = pathogens - 1
            cursor.execute("UPDATE users SET pathogens = ? WHERE user_id = ?", (new_pathogens, user_id))
            await message.reply(
                f"‚ùå –ò–º–º—É–Ω–∏—Ç–µ—Ç –∂–µ—Ä—Ç–≤—ã {victim_display_name} —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫! –û—Å—Ç–∞–ª–æ—Å—å –ø–∞—Ç–æ–≥–µ–Ω–æ–≤: {new_pathogens}",
                parse_mode="HTML"
            )
            return

        # –†–∞—Å—á—ë—Ç –æ–ø—ã—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        victim_experience = victim_data[0]
        base_experience = max(1, victim_experience // 10)
        virus_bonus_percent = virus_skill * 1.5
        virus_bonus = int(base_experience * (virus_bonus_percent / 100))
        total_experience = base_experience + virus_bonus

        mutation_happened = random.random() < 0.1
        if mutation_happened:
            mutation_bonus = total_experience * (virus_skill / 100)
            total_experience += int(mutation_bonus)
            mutation_text = f" <b>üéÅ –ú—É—Ç–∞—Ü–∏—è –≤–∏—Ä—É—Å–∞!</b>"
        else:
            mutation_text = ""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –æ–ø—ã—Ç–∞, –µ—Å–ª–∏ –±—ã–ª —É–∂–µ –∑–∞—Ä–∞–∂—ë–Ω
        cursor.execute("""
            SELECT experience_gained FROM infected WHERE user_id = ? AND victim_id = ? ORDER BY infect_date DESC LIMIT 1
        """, (user_id, victim_id))
        previous_infected_data = cursor.fetchone()

        if previous_infected_data:
            previous_experience = previous_infected_data[0]
            experience_diff = total_experience - previous_experience
            if experience_diff > 0:
                experience_message = f"+{experience_diff:,} –±–∏–æ –µ–∂–∏"
            elif experience_diff < 0:
                experience_message = f"{experience_diff:,} –±–∏–æ –µ–∂–∏"
            else:
                experience_message = f"-{experience_diff:,} –±–∏–æ –µ–∂–∏"
        else:
            experience_message = f"+{total_experience:,} –±–∏–æ –µ–∂–∏"

        # –£–º–µ–Ω—å—à–∞–µ–º –ø–∞—Ç–æ–≥–µ–Ω—ã
        new_pathogens = pathogens - 1
        cursor.execute("UPDATE users SET pathogens = ? WHERE user_id = ?", (new_pathogens, user_id))

        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä—è—á–∫—É
        fever_duration = max(1, (lethality // 3) + 1)
        fever_end_time = (datetime.now() + timedelta(minutes=fever_duration)).strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute("UPDATE users SET fever_end_time = ? WHERE user_id = ?", (fever_end_time, victim_id))

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
        cursor.execute("UPDATE users SET bio_experience = bio_experience + ? WHERE user_id = ?", (total_experience, user_id))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—Ä–∞–∂–µ–Ω–∏–µ
        infection_end_date = (datetime.now() + timedelta(days=lethality)).strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute("""
            INSERT INTO infected (user_id, victim_id, infect_date, infect_end_date, victim_experience, experience_gained)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (user_id, victim_id, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), infection_end_date, victim_experience, total_experience))

        conn.commit()

        attacker_display_name = f'<a href="tg://openmessage?user_id={user_id}">{user_data[2]}</a>'
        victim_display_name = f'<a href="tg://openmessage?user_id={victim_data[3]}">{victim_data[4] if victim_data[4] else victim_data[2]}</a>'
        
        await message.reply(
            f"üéÑ {attacker_display_name} –ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é {victim_display_name} –ø–∞—Ç–æ–≥–µ–Ω–æ–º ¬´{pathogen_name}¬ª\n"
            f"üéÅ {base_experience} –ø–æ–¥–∞—Ä–∫–æ–≤\n"
            f"{experience_message} {mutation_text}\n"
            f"‚ùÑÔ∏è –ì–æ—Ä—è—á–∫–∞ –Ω–∞ {fever_duration} –º–∏–Ω.\n"
            f"üéÖ –ó–∞—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ {lethality} –¥–Ω–µ–π\n"
            f"ü¶† –û—Å—Ç–∞–ª–æ—Å—å –ø–∞—Ç–æ–≥–µ–Ω–æ–≤: {new_pathogens}\n",
            parse_mode="HTML"
        )

    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

        await run_lab_cycle(user_id)

    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def run_lab_cycle(user_id):
    """–¶–∏–∫–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ç–æ–≥–µ–Ω–æ–≤ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏."""
    # –õ–æ–≥–∏–∫–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
    cursor.execute('SELECT pathogens, qualification FROM users WHERE user_id = ?', (user_id,))
    user_data = cursor.fetchone()

    if not user_data:
        return

    pathogens, qualification = user_data
    recovery_time = max(20 - qualification * 2, 5)
    next_recovery = datetime.now() + timedelta(minutes=recovery_time)

    new_pathogens = pathogens + 1
    cursor.execute("UPDATE users SET pathogens = ? WHERE user_id = ?", (new_pathogens, user_id))
    conn.commit()

@dp.message_handler(lambda message: message.text.lower() == "–≤–∞–∫")
async def buy_vaccine(message: types.Message):
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()

    if not user_data:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML")
        return

    if user_data[1] == 1:
        return

    user_id = message.from_user.id

    cursor.execute("SELECT fever_end_time, bio_resources FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    if not user_data or not user_data[0]:
        await message.reply("‚ùÑÔ∏è –ú–æ—Ä–æ–∑–Ω–∞—è —Å–≤–µ–∂–µ—Å—Ç—å - –Ω–∏–∫–∞–∫–æ–π –≥–æ—Ä—è—á–∫–∏! üåü")
        return

    fever_end_time = user_data[0]
    bio_resources = user_data[1]
    fever_end = datetime.strptime(fever_end_time, '%Y-%–º-%d %H:%M:%S')
    remaining_time = fever_end - datetime.now()

    if remaining_time <= timedelta(0):
        await message.reply("‚ùÑÔ∏è –ú–æ—Ä–æ–∑–Ω–∞—è —Å–≤–µ–∂–µ—Å—Ç—å - –Ω–∏–∫–∞–∫–æ–π –≥–æ—Ä—è—á–∫–∏! üåü")
        return

    fever_minutes = math.ceil(remaining_time.total_seconds() / 60)
    vaccine_cost = fever_minutes * 50

    if bio_resources < vaccine_cost:
        await message.reply(f"üéÅ –î–ª—è –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–≥–æ —á—É–¥–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {vaccine_cost:,} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤! üåü")
        return

    cursor.execute("""
        UPDATE users 
        SET fever_end_time = NULL,
            bio_resources = bio_resources - ?
        WHERE user_id = ?
    """, (vaccine_cost, user_id))
    conn.commit()

    await message.reply(f"üéÖüíâ –í–∞–∫—Ü–∏–Ω–∞ –∏–∑–ª–µ—á–∏–ª–∞ –≤–∞—Å –æ—Ç –≥–æ—Ä—è—á–∫–∏. –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞–∫—Ü–∏–Ω—ã: {vaccine_cost:,} –±–∏–æ —Ä–µ—Å—É—Ä—Å–æ–≤ üéÑ")

@dp.message_handler(lambda message: message.text.lower() == "–ª–∞–±")
async def lab_report(message: types.Message):
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()

    if not user_data:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML")
        return

    if user_data[1] == 1:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
        return

    try:
        user_id = message.from_user.id

        cursor.execute('''
            SELECT 
                bio_experience, bio_resources, skill_level, contagion, immunity, 
                virus_skill, lethality, pathogens, max_pathogens, qualification, 
                pathogen_name, COALESCE(lab_name, username) AS lab_display_name 
            FROM users 
            WHERE user_id = ?
        ''', (user_id,))
        user = cursor.fetchone()

        if not user:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        (bio_experience, bio_resources, skill_level, contagion, immunity, 
         virus_skill, lethality, pathogens, max_pathogens, qualification, 
         pathogen_name, lab_display_name) = user

        recovery_time = max(20 - qualification * 2, 5)
        remaining_seconds = recovery_time * 60
        if remaining_seconds >= 60:
            minutes = remaining_seconds // 60
            seconds = remaining_seconds % 60
            recovery_time_str = f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
        else:
            recovery_time_str = f"{remaining_seconds} —Å–µ–∫"

        name = message.from_user.first_name
        await message.reply(f"""üéÑ <i>–ü—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ –¥–æ—Å—å–µ:</i> <i>{lab_display_name or name}</i>

<blockquote>‚ùÑÔ∏è –ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –ø–∞—Ç–æ–≥–µ–Ω: <i>{pathogen_name}</i>
üéÅ <b>–ó–∞–ø–∞—Å —à—Ç–∞–º–º–æ–≤:</b> <i>{pathogens}/{max_pathogens}</i>
üéÖ <b>–£—Ä–æ–≤–µ–Ω—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è:</b> <i>{qualification}</i>
‚è±Ô∏è <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —à—Ç–∞–º–º–∞:</b> <i>{recovery_time_str}</i>
</blockquote>

<b>[üéä –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –Ω–∞–≤—ã–∫–∏]</b>
<blockquote>‚îú üåü <b>–£—Ä–æ–≤–µ–Ω—å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞:</b> <i>{skill_level}</i>
‚îú ü¶† <b>–°–∏–ª–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏—è:</b> <i>{contagion}</i>
‚îú ‚õÑ <b>–ó–∏–º–Ω–∏–π –∏–º–º—É–Ω–∏—Ç–µ—Ç:</b> <i>{immunity}</i>
‚îú üéÜ <b>–í–∏—Ä—É—Å–Ω–∞—è –º–æ—â—å:</b> <i>{virus_skill}</i>
‚îî ‚ùÑÔ∏è <b>–õ–µ–¥—è–Ω–Ω–∞—è –ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å:</b> <i>{lethality}</i></blockquote>

<b>[üéà –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è]</b>
<blockquote>‚îú üéâ <b>–ø–æ–¥–∞—Ä–∫–æ–≤:</b> <i>{bio_experience}</i>
‚îî üéÄ <b>–ë–∏–æ-—Ä–µ—Å—É—Ä—Å—ã:</b> <i>{bio_resources}</i></blockquote>
""", parse_mode="HTML")
    finally:
        conn.commit()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–Ω–æ–≤
cursor.execute('''
CREATE TABLE IF NOT EXISTS user_bans (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    ban_type TEXT,  -- 'lab' –∏–ª–∏ 'pathogen'
    ban_end TEXT,
    ban_reason TEXT,
    banned_by INTEGER,
    banned_at TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
)''')

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞
async def check_ban(user_id: int, ban_type: str) -> tuple:
    current_time = datetime.utcnow()
    
    cursor.execute('''
        SELECT ban_end, ban_reason, banned_by 
        FROM user_bans 
        WHERE user_id = ? AND ban_type = ? 
        AND ban_end > ? 
        ORDER BY ban_end DESC 
        LIMIT 1
    ''', (user_id, ban_type, current_time.strftime('%Y-%m-%d %H:%M:%S')))
    
    ban_info = cursor.fetchone()
    
    if ban_info:
        ban_end = datetime.strptime(ban_info[0], '%Y-%m-%d %H:%M:%S')
        if current_time < ban_end:
            return ban_info
    return None

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –±–∞–Ω–∞
def format_ban_message(ban_info, admin_name):
    ban_end = datetime.strptime(ban_info[0], '%Y-%m-%d %H:%M:%S')
    current_time = datetime.utcnow()
    time_left = ban_end - current_time
    hours = int(time_left.total_seconds() // 3600)
    minutes = int((time_left.total_seconds() % 3600) // 60)
    
    return (f"‚ùå –£ –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {ban_info[1]}\n"
            f"–í—ã–¥–∞–ª: <a href='tg://user?id={ban_info[2]}'>{admin_name}</a>\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {hours} —á. {minutes} –º–∏–Ω.")

@dp.message_handler(lambda message: message.text.lower() == '/–ª–∞–±—ã')
async def show_lab_changes(message: types.Message):
     if message.from_user.id not in [6832369115, 1383131753]:
        return
        
        cursor.execute('''
        SELECT u.username, u.lab_name, pu.timestamp
        FROM users u
        LEFT JOIN pathogen_updates pu ON u.user_id = pu.user_id
        WHERE u.lab_name IS NOT NULL
        ORDER BY pu.timestamp DESC
        LIMIT 40
    ''')
        lab_changes = cursor.fetchall()

        if not lab_changes:
            await message.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π.", parse_mode="HTML")
            return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π
        response = "üçä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π:</b>\n\n"
        for index, (username, lab_name, timestamp) in enumerate(lab_changes, start=1):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            formatted_time = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S').strftime('%d-%m-%Y %H:%M:%S')
            response += f"{index}. @{username} - {lab_name} (–∏–∑–º–µ–Ω–µ–Ω–æ: {formatted_time})\n"

        await message.reply(response, parse_mode="HTML")

@dp.message_handler(lambda message: message.text.lower().startswith("+–∏–º—è –ª–∞–±"))
async def set_lab_name(message: types.Message):
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()
    
    if not user_data:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_data[1] == 1:
        await message.reply("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ù–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏.", parse_mode="HTML")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    lab_name = message.text[8:].strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∏–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
    if not lab_name:
        await message.reply("üìî <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏.</b>", parse_mode="HTML")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
    if len(lab_name) > 20:
        await message.reply("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏! –ú–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤.", parse_mode="HTML")
        return

    cursor.execute('SELECT id, lab_name, reason, punishment_duration, unpunished_at FROM labs WHERE user_id = ?', (message.from_user.id,))
    lab_data = cursor.fetchone()

    current_time = datetime.now()

    if lab_data:
        unpunished_at = datetime.strptime(lab_data[4], '%Y-%m-%d %H:%M:%S')
        if unpunished_at > current_time:
            await message.reply(f"‚ùå –í–∞—à–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏.\n"
                                 f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –¥–æ {unpunished_at.strftime('%Y-%m-%d %H:%M:%S')}.", parse_mode="HTML")
            return

    cursor.execute('''
        INSERT INTO labs (user_id, lab_name, reason, punishment_duration, unpunished_at, timestamp) 
        VALUES (?, ?, ?, ?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET lab_name = ?, reason = ?, punishment_duration = ?, 
        unpunished_at = ?, timestamp = ?
    ''', (message.from_user.id, lab_name, "", 0, "", current_time.strftime('%Y-%m-%d %H:%M:%S'),
          lab_name, "", 0, "", current_time.strftime('%Y-%m-%d %H:%M:%S')))
    conn.commit()

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply(f"‚úÖ –ò–º—è –≤–∞—à–µ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫: <b>{lab_name}</b>", parse_mode="HTML")


@dp.message_handler(lambda message: message.text.lower() == "-–∏–º—è –ª–∞–±")
async def reset_lab_name(message: types.Message):
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()
    
    if not user_data:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    if user_data[1] == 1:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è
        cursor.execute('SELECT unpunished_at FROM pathogen_updates WHERE user_id = ?', (message.from_user.id,))
        punishment_data = cursor.fetchone()

        if punishment_data:
            unpunished_at_str = punishment_data[0]
            unpunished_at = datetime.strptime(unpunished_at_str, '%Y-%m-%d %H:%M:%S')
            current_time = datetime.utcnow()

            # –ï—Å–ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ
            if current_time < unpunished_at:
                time_left = unpunished_at - current_time
                minutes_left = time_left.total_seconds() // 60
                await message.reply(f"‚ùå –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ø–æ–¥ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ–º! –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ {int(minutes_left)} –º–∏–Ω—É—Ç.")
                return
            else:
                # –ï—Å–ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ, —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                cursor.execute('UPDATE users SET is_banned = 0 WHERE user_id = ?', (message.from_user.id,))
                conn.commit()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
    cursor.execute('UPDATE users SET lab_name = NULL WHERE user_id = ?', (message.from_user.id,))
    conn.commit()
    await message.reply("‚úÖ –ò–º—è –≤–∞—à–µ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —Å–±—Ä–æ—à–µ–Ω–æ.")


@dp.message_handler(lambda message: message.text.startswith('/rlab'))
async def reset_lab_name_by_admin(message: types.Message):
    if message.from_user.id not in [6832369115, 1383131753]:
        return

    try:
        args = message.get_args().split(maxsplit=1)
        if len(args) < 1:
            await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /rlab [ID] [–ø—Ä–∏—á–∏–Ω–∞ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)]\n–ü—Ä–∏–º–µ—Ä: /rlab 123456789 –ø–ª–æ—Ö–æ–µ –∏–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏")
            return

        target_id = int(args[0])
        reason = args[1] if len(args) > 1 else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT username, lab_name, is_banned FROM users WHERE user_id = ?', (target_id,))
        user_data = cursor.fetchone()
        
        if not user_data:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        username, lab_name, is_banned = user_data

        current_time = datetime.utcnow()
        end_time = current_time + timedelta(weeks=1)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–∫–∞–∑–∞–Ω–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã labs
        cursor.execute('SELECT reason, unpunished_at FROM labs WHERE user_id = ?', (target_id,))
        lab_data = cursor.fetchone()

        if lab_data:
            punishment_reason, unpunished_at_str = lab_data
            unpunished_at = datetime.strptime(unpunished_at_str, '%Y-%m-%d %H:%M:%S')
        else:
            punishment_reason = None
            unpunished_at = None

        # –ï—Å–ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, —Å–Ω–∏–º–µ–º –µ–≥–æ
        if is_banned:
            cursor.execute('UPDATE users SET is_banned = 0 WHERE user_id = ?', (target_id,))
            cursor.execute('UPDATE labs SET unpunished_at = ?, reason = ?, punishment_duration = 0 WHERE user_id = ?',
                           (current_time.strftime('%Y-%m-%d %H:%M:%S'), "–ù–∞–∫–∞–∑–∞–Ω–∏–µ —Å–Ω—è—Ç–æ", 0, target_id))
            conn.commit()
            await message.reply(f"‚úÖ –ù–∞–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <a href='tg://user?id={target_id}'>{username}</a> —Å–Ω—è—Ç–æ.", parse_mode="HTML")
        else:
            # –ï—Å–ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
            cursor.execute('UPDATE users SET is_banned = 1 WHERE user_id = ?', (target_id,))
            cursor.execute('''
                INSERT INTO labs (user_id, lab_name, reason, punishment_duration, unpunished_at, timestamp)
                VALUES (?, ?, ?, ?, ?, ?)
                ON CONFLICT(user_id) DO UPDATE SET 
                    reason = ?, 
                    punishment_duration = ?, 
                    unpunished_at = ?, 
                    timestamp = ?
            ''', (target_id, lab_name, reason, 7, end_time.strftime('%Y-%m-%d %H:%M:%S'), current_time.strftime('%Y-%m-%d %H:%M:%S'),
                  reason, 7, end_time.strftime('%Y-%m-%d %H:%M:%S'), current_time.strftime('%Y-%m-%d %H:%M:%S')))
            conn.commit()

            await message.reply(
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={target_id}'>{username}</a>\n"
                f"üè∑ –°—Ç–∞—Ä–æ–µ –∏–º—è: {lab_name or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n"
                f"‚è∞ –°—Ä–æ–∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—è: 7 –¥–Ω–µ–π\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"‚ùå –ù–∞–∫–∞–∑–∞–Ω–∏–µ –±—É–¥–µ—Ç —Å–Ω—è—Ç–æ –ø–æ—Å–ª–µ {end_time.strftime('%Y-%m-%d %H:%M:%S')}",
                parse_mode="HTML"
            )

    except Exception as e:
        print(f"Error in reset_lab_name_by_admin: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

@dp.message_handler(lambda message: message.text.lower().startswith('+–∏–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞'))
async def set_pathogen_name(message: types.Message):
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()

    if not user_data:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ–º
    if user_data[1] == 1:  # –ï—Å–ª–∏ is_banned = 1, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await message.reply("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ø–æ–¥ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ–º.", parse_mode="HTML")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    pathogen_name = message.text[len('+–∏–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞'):].strip()

    if not pathogen_name:
        await message.reply(
            f"‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ç–æ–≥–µ–Ω–∞\n"
            f"‚îî –ü—Ä–∏–º–µ—Ä: +–∏–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞ –û–º–∏–∫—Ä–æ–Ω",
            parse_mode="HTML"
        )
        return

    if len(pathogen_name) > 20:
        await message.reply(
            f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!\n"
            f"‚îî –ú–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤",
            parse_mode="HTML"
        )
        return

    cursor.execute('UPDATE users SET pathogen_name = ? WHERE user_id = ?', (pathogen_name, message.from_user.id))
    conn.commit()

    await message.reply(
        f"üß¨ –ü–∞—Ç–æ–≥–µ–Ω –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω\n"
        f"‚îî –ù–æ–≤–æ–µ –∏–º—è: {pathogen_name}",
        parse_mode="HTML"
    )

@dp.message_handler(lambda message: message.text.lower() == "-–∏–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞")
async def reset_pathogen_name(message: types.Message):
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()
    
    if not user_data:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML")
        return
        
    if user_data[1] == 1:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã pathogen_updates
        cursor.execute('SELECT unpunished_at FROM pathogen_updates WHERE user_id = ?', (message.from_user.id,))
        punishment_data = cursor.fetchone()

        if punishment_data:
            unpunished_at_str = punishment_data[0]
            unpunished_at = datetime.strptime(unpunished_at_str, '%Y-%m-%d %H:%M:%S')
            current_time = datetime.utcnow()

            if current_time < unpunished_at:
                time_left = unpunished_at - current_time
                minutes_left = time_left.total_seconds() // 60
                await message.reply(f"‚ùå –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ø–æ–¥ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ–º! –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ {int(minutes_left)} –º–∏–Ω—É—Ç.")
                return
            else:
                # –ù–∞–∫–∞–∑–∞–Ω–∏–µ —Å–Ω—è—Ç–æ, —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ is_banned
                cursor.execute('UPDATE users SET is_banned = 0 WHERE user_id = ?', (message.from_user.id,))
                conn.commit()
        
    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏—è –∏–ª–∏ –æ–Ω–æ —É–∂–µ –ø—Ä–æ—à–ª–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞
    cursor.execute('UPDATE users SET pathogen_name = "–∫–æ—Ç—è—á–∫–∞" WHERE user_id = ?', (message.from_user.id,))
    conn.commit()
    await message.reply("‚úÖ –ò–º—è –≤–∞—à–µ–≥–æ –ø–∞—Ç–æ–≥–µ–Ω–∞ —Å–±—Ä–æ—à–µ–Ω–æ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ: ¬´–∫–æ—Ç—è—á–∫–∞¬ª.")

@dp.message_handler(lambda message: message.text.lower().startswith('/rpat '))
async def admin_reset_pathogen(message: types.Message):
    cursor.execute('SELECT admin_level FROM admins WHERE user_id = ?', (message.from_user.id,))
    admin_data = cursor.fetchone()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if message.from_user.id not in [6832369115, 1291390143,]:
        return

    try:
        args = message.get_args().split(maxsplit=1)
        if len(args) < 1:
            await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /rpat [ID] [–ø—Ä–∏—á–∏–Ω–∞ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)]\n–ü—Ä–∏–º–µ—Ä: /rpat 123456789 –ø–ª–æ—Ö–æ–µ –∏–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞")
            return

        target_id = int(args[0])
        reason = args[1] if len(args) > 1 else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        cursor.execute('SELECT username, pathogen_name FROM users WHERE user_id = ?', (target_id,))
        user_data = cursor.fetchone()
        
        if not user_data:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        username, pathogen_name = user_data

        # –°—Ä–æ–∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—è: 7 –¥–Ω–µ–π
        current_time = datetime.utcnow()
        end_time = current_time + timedelta(weeks=1)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞–∫–∞–∑–∞–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É pathogen_updates
        cursor.execute('''
            INSERT INTO pathogen_updates (user_id, reason, punishment_duration, unpunished_at, timestamp) 
            VALUES (?, ?, ?, ?, ?)
        ''', (target_id, reason, 7, end_time.strftime('%Y-%m-%d %H:%M:%S'), current_time.strftime('%Y-%m-%d %H:%M:%S')))
        conn.commit()

        await message.reply(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={target_id}'>{username}</a>\n"
            f"üè∑ –°—Ç–∞—Ä—ã–π –ø–∞—Ç–æ–≥–µ–Ω: {pathogen_name}\n"
            f"‚è∞ –°—Ä–æ–∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—è: 7 –¥–Ω–µ–π\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}", 
            parse_mode="HTML"
        )

    except Exception as e:
        print(f"Error in admin_reset_pathogen: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

# –ö–æ–º–∞–Ω–¥–∞ "–ë–∏–æ—Ç–æ–ø" —Å —É—á–µ—Ç–æ–º –∏–º–µ–Ω–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
@dp.message_handler(lambda message: message.text.lower().startswith("–±–∏–æ—Ç–æ–ø"))
async def bio_top(message: types.Message):
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()
    
    if not user_data:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML")
        return
        
    if user_data[1] == 1:
        return

    args = message.text.split()

    try:
        if len(args) == 1:
            cursor.execute('''
                SELECT 
                    user_id, 
                    CASE 
                        WHEN lab_name IS NOT NULL AND lab_name != '' THEN lab_name
                        ELSE COALESCE(username, user_id)
                    END AS display_name, 
                    bio_experience
                FROM users 
                ORDER BY bio_experience DESC 
                LIMIT 20
            ''')
            top_users = cursor.fetchall()

            if not top_users:
                await message.reply("‚ùå –¢–æ–ø –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π –ø—É—Å—Ç.")
                return

            top_message = "üéÑ <b>–ó–∏–º–Ω–∏–π —Ç–æ–ø –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π –ø–æ –±–∏–æ-–æ–ø—ã—Ç—É:</b>\n\n"
            total_experience = sum(user[2] for user in top_users)
            user_id_from_message = message.from_user.id

            for idx, (user_id, display_name, bio_experience) in enumerate(top_users, 1):
                if user_id == user_id_from_message:
                    top_message += f'''{idx}. <a href="tg://openmessage?user_id={user_id}">{display_name}</a> | {bio_experience:,} –ø–æ–¥–∞—Ä–∫–æ–≤\n'''
                    continue
                top_message += f'''{idx}. <a href="tg://openmessage?user_id={user_id}">{display_name}</a> | {bio_experience:,} –ø–æ–¥–∞—Ä–∫–æ–≤\n'''

            top_message += f"\n‚òÉÔ∏è –û–±—â–∏–π –æ–ø—ã—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π: {total_experience:,}"

        elif len(args) == 2 and args[1].lower() == "–Ω–∞–≤—ã–∫":
            cursor.execute('''
                SELECT 
                    user_id, 
                    CASE 
                        WHEN lab_name IS NOT NULL AND lab_name != '' THEN lab_name
                        ELSE COALESCE(username, user_id)
                    END AS display_name, 
                    skill_level
                FROM users 
                ORDER BY skill_level DESC 
                LIMIT 20
            ''')
            top_users = cursor.fetchall()

            if not top_users:
                await message.reply("‚ùå –¢–æ–ø –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π –ø—É—Å—Ç.")
                return

            top_message = "üéöÔ∏è <b>–¢–æ–ø –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π –ø–æ —É—Ä–æ–≤–Ω—è–º –Ω–∞–≤—ã–∫–æ–≤:</b>\n"
            total_skill_level = sum(user[2] for user in top_users)

            for idx, (user_id, display_name, skill_level) in enumerate(top_users, 1):
                top_message += f'''{idx}. <a href="tg://openmessage?user_id={user_id}">{display_name}</a> | {skill_level} —É—Ä.\n'''

            top_message += f"\nüéöÔ∏è –°—É–º–º–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–æ–≤: {total_skill_level}"

        elif len(args) == 2 and args[1].lower() == "–≤–∏—Ä—É—Å":
            cursor.execute('''
                SELECT 
                    user_id, 
                    CASE 
                        WHEN lab_name IS NOT NULL AND lab_name != '' THEN lab_name
                        ELSE COALESCE(username, user_id)
                    END AS display_name, 
                    virus_skill
                FROM users 
                ORDER BY virus_skill DESC 
                LIMIT 20
            ''')
            top_users = cursor.fetchall()

            if not top_users:
                await message.reply("‚ùå –¢–æ–ø –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π –ø—É—Å—Ç.")
                return

            top_message = "üî¨ <b>–¢–æ–ø –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π –ø–æ —É—Ä–æ–≤–Ω—è–º –≤–∏—Ä—É—Å–æ–≤:</b>\n"
            total_virus_skill = sum(user[2] for user in top_users)

            for idx, (user_id, display_name, virus_skill) in enumerate(top_users, 1):
                top_message += f'''{idx}. <a href="tg://openmessage?user_id={user_id}">{display_name}</a> | {virus_skill} —É—Ä.\n'''

            top_message += f"\nüî¨ –°—É–º–º–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∏—Ä—É—Å–æ–≤: {total_virus_skill}"

        else:
            top_message = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫–∞–∫: –±–∏–æ—Ç–æ–ø [–Ω–∞–≤—ã–∫/–≤–∏—Ä—É—Å]."

        await message.answer(top_message, parse_mode='HTML', disable_web_page_preview=True)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –±–∏–æ—Ç–æ–ø: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")
        
# –ö–æ–º–∞–Ω–¥–∞ "–õ–∏—Å—Ç" (—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
@dp.message_handler(commands=['–ª–∏—Å—Ç'])
async def list_users(message: types.Message):
    if message.from_user.id not in [6832369115]:
        return

    # –ï—Å–ª–∏ user_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    cursor.execute('SELECT user_id, registration_date FROM users')
    users = cursor.fetchall()

    list_message = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for index, (user_id, registration_date) in enumerate(users, start=1):
        list_message += f'{index}. ID: <a href="tg://openmessage?user_id={user_id}">–∫–æ—Ç–∏–∫</a> | {registration_date}\n'
    
    await message.reply(list_message, parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ "Bioexp" ‚Äî –°—É–º–º–∞—Ä–Ω—ã–π –æ–ø—ã—Ç –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
@dp.message_handler(commands=['bioexp'])
async def bio_exp(message: types.Message):
    if message.from_user.id not in [6832369115]:
        return
    cursor.execute('SELECT SUM(bio_experience) FROM users')
    total_exp = cursor.fetchone()[0]
    await message.reply(
    f"üéÑ –ü–æ–¥ —ë–ª–∫–æ–π —Å–æ–±—Ä–∞–Ω–æ:\n"
    f"‚îî üéÅ {total_exp:,} –ø–æ–¥–∞—Ä–∫–æ–≤",
    parse_mode="HTML"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—â–µ–π –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–∫–∞—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤
async def process_skill_upgrade(message: types.Message, skill: str, skill_column: str, cost_multiplier: float):
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()
    
    if not user_data:
        await message.reply("üéÑ‚ùÑÔ∏è –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! üéÖ", parse_mode="HTML")
        return
        
    if user_data[1] == 1:
        return

    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.lower().split()
    
    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –ø—Ä–æ–±–µ–ª–∞, –Ω–æ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã - —ç—Ç–æ –æ—à–∏–±–∫–∞
    if len(command_parts) == 1 and any(char.isdigit() for char in command_parts[0]):
        await message.reply("‚ùÑÔ∏èüéÖ –ê—Ö, –ø–æ—Å–ª–µ –Ω–∞–≤—ã–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º —É—Ä–æ–≤–Ω–µ–π! –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞? üéÅ", parse_mode="HTML")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π
    try:
        if len(command_parts) > 1:
            levels = int(command_parts[1])
        else:
            levels = 1
    except ValueError:
        return

    if levels < 1 or levels > 5:
        await message.reply("üéÑ‚ùÑÔ∏è –û, –º–æ–∂–Ω–æ –ø—Ä–æ–∫–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç 1 –¥–æ 5 —É—Ä–æ–≤–Ω–µ–π –∑–∞ —Ä–∞–∑! üéÖ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üéÅ", parse_mode="HTML")
        return

    is_upgrade = message.text.startswith("++")

    cursor.execute(
        f'SELECT bio_resources, {skill_column} FROM users WHERE user_id = ?',
        (user_id,)
    )
    user = cursor.fetchone()

    if user:
        bio_resources, current_value = user

        if skill == "–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è" and current_value + levels > 20:
            await message.reply("üéÑüéÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ ‚Äî 20!‚ùÑÔ∏è", parse_mode="HTML")
            return

        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–µ–∑ —Å–∫–∏–¥–∫–∏
        total_cost = sum([int((current_value + i + 1) ** cost_multiplier) for i in range(levels)])
        formatted_cost = '{0:,}'.format(total_cost).replace(',', ' ')

        skill_emojis = {
            "–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å": "ü¶†",
            "–∏–º–º—É–Ω–∏—Ç–µ—Ç": "üõ°Ô∏è",
            "–≤–∏—Ä—É—Å": "üß¨",
            "–Ω–∞–≤—ã–∫": "üìö",
            "–ø–∞—Ç–æ–≥–µ–Ω—ã": "üß™",
            "–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è": "üéì",
            "–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å": "‚ò†Ô∏è"
        }

        skill_emoji = skill_emojis.get(skill, "‚ú®")

        if not is_upgrade:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–∫–∞—á–∫—É —Å —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–∞ –Ω–æ–≤—ã–π
            await message.reply(
                f"üéÑ‚ú® <b>–ó–∏–º–Ω—è—è –º–∞–≥–∏—è –ø—Ä–æ–∫–∞—á–∫–∏ –Ω–∞–≤—ã–∫–∞</b> <i>{skill_emoji} ¬´{skill}¬ª</i> üéÖ\n\n"
                f"‚ùÑÔ∏è <b>–° —É—Ä–æ–≤–Ω—è {current_value} –¥–æ {current_value + levels}</b>\n"
                f"üéÅ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫–∞—á–∫–∏:</b> <i>{formatted_cost}</i> –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤\n",
                parse_mode="HTML"
            )
            return

        if bio_resources >= total_cost:
            new_value = current_value + levels
            cursor.execute(
                f'UPDATE users SET bio_resources = bio_resources - ?, {skill_column} = ? WHERE user_id = ?',
                (total_cost, new_value, user_id)
            )
            conn.commit()
            # –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–∫–∞—á–∫–∞
            await message.reply(
                f"üéÑüéâ <b>–í–æ–ª—à–µ–±–Ω–∞—è –ø—Ä–æ–∫–∞—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b> <i>{skill_emoji} ¬´{skill}¬ª</i> —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω! üéÖ\n\n"
                f"‚ùÑÔ∏è <b>–° —É—Ä–æ–≤–Ω—è {current_value} –¥–æ {new_value}</b> üéÅ\n"
                f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <i>{formatted_cost}</i> –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤\n",
                parse_mode="HTML"
            )
        else:
            await message.reply(
                f"‚ùÑÔ∏èüéÖ <b>–û–π, —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç!</b> üéÅ\n\n"
                f"{skill_emoji} –î–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ <b>{skill}</b> –Ω—É–∂–Ω–æ:\n"
                f"üí∞ <i>{formatted_cost}</i> –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤\n",
                parse_mode="HTML"
            )
    else:
        await message.reply("üéÑ‚ùÑÔ∏è –£–ø—Å, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é! –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è /start! üéÖ", parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤
@dp.message_handler(lambda message: message.text.lower().startswith(("+–∑–∑", "++–∑–∑", "++–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å", "+–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å")))
async def upgrade_contagion(message: types.Message):
    await process_skill_upgrade(message, "–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å", "contagion", 2.5)

@dp.message_handler(lambda message: message.text.lower().startswith(("+–∏–º–º—É–Ω", "++–∏–º–º—É–Ω", "++–∏–º–º—É–Ω–∏—Ç–µ—Ç", "+–∏–º–º—É–Ω–∏—Ç–µ—Ç")))
async def upgrade_immunity(message: types.Message):
    await process_skill_upgrade(message, "–∏–º–º—É–Ω–∏—Ç–µ—Ç", "immunity", 2.4575)

@dp.message_handler(lambda message: message.text.lower().startswith(("+–≤–∏—Ä—É—Å", "++–≤–∏—Ä—É—Å")))
async def upgrade_virus(message: types.Message):
    await process_skill_upgrade(message, "–≤–∏—Ä—É—Å", "virus_skill", 2.7)

@dp.message_handler(lambda message: message.text.lower().startswith(("+–Ω–∞–≤—ã–∫", "++–Ω–∞–≤—ã–∫")))
async def upgrade_skill(message: types.Message):
    await process_skill_upgrade(message, "–Ω–∞–≤—ã–∫", "skill_level", 2.8)

@dp.message_handler(lambda message: message.text.lower().startswith(("+–ø–∞—Ç—ã", "++–ø–∞—Ç—ã", "++–ø–∞—Ç–æ–≥–µ–Ω", "++–ø–∞—Ç", "+–ø–∞—Ç", "+–ø–∞—Ç–æ–≥–µ–Ω")))
async def upgrade_pathogens(message: types.Message):
    await process_skill_upgrade(message, "–ø–∞—Ç–æ–≥–µ–Ω—ã", "max_pathogens", 2.0)

@dp.message_handler(lambda message: message.text.lower().startswith(("+–∫–≤–∞–ª–∞", "++–∫–≤–∞–ª–∞", "+–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è", "++–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è", "+—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "++—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞")))
async def upgrade_qualification(message: types.Message):
    await process_skill_upgrade(message, "–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è", "qualification", 2.6)

@dp.message_handler(lambda message: message.text.lower().startswith(("+–ª–µ—Ç–∞–ª", "++–ª–µ—Ç–∞–ª", "+–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å", "++–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å")))
async def upgrade_lethality(message: types.Message):
    await process_skill_upgrade(message, "–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å", "lethality", 1.795)

@dp.message_handler(lambda message: message.text.lower() == "!–ø–æ–º–æ—â—å")
async def help_command(message: types.Message):
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()
    
    if not user_data:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML")
        return
        
    if user_data[1] == 1:
        return

    await message.answer(f"""üéÑ <b>–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å 2024</b>

üéÖ <b>–í–æ–ª—à–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
<code>!–ø–æ–º–æ—â—å</code> - –ö–Ω–∏–≥–∞ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
<code>–ª–∞–±</code> - –ó–∏–º–Ω—è—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –î–µ–¥–∞ –ú–æ—Ä–æ–∑–∞
<code>–≤–∞–∫</code> - –≠–ª–∏–∫—Å–∏—Ä –æ—Ç –∑–∏–º–Ω–µ–π –≥–æ—Ä—è—á–∫–∏
<code>–±–∏–æ—Ç–æ–ø</code> - –†–µ–π—Ç–∏–Ω–≥ –≤–æ–ª—à–µ–±–Ω–∏–∫–æ–≤ –≥–æ–¥–∞
<code>–±–∏–æ—Ç–æ–ø –Ω–∞–≤—ã–∫</code> - –ú–∞—Å—Ç–µ—Ä–∞ –∑–∏–º–Ω–∏—Ö —á–∞—Ä
<code>–±–∏–æ—Ç–æ–ø –≤–∏—Ä—É—Å</code> - –ö–æ—Ä–æ–ª–∏ –ª–µ–¥—è–Ω—ã—Ö –≤–∏—Ä—É—Å–æ–≤

‚ùÑÔ∏è <b>–ó–∏–º–Ω–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ:</b>
+(–Ω–∞–≤—ã–∫) - –†–∞—Å—á—ë—Ç —Ü–µ–Ω—ã –∑–∞–º–æ—Ä–æ–∑–∫–∏
++(–Ω–∞–≤—ã–∫) - –£—Å–∏–ª–µ–Ω–∏–µ –∑–∏–º–Ω–µ–π –º–∞–≥–∏–∏

<blockquote>üéÅ <b>–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è:</b>
<code>+–∏–º—è –ª–∞–±</code> (–Ω–∞–∑–≤–∞–Ω–∏–µ) - –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–Ω–µ–∂–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
<code>-–∏–º—è –ª–∞–±</code> - –°–±—Ä–æ—Å –∏–º–µ–Ω–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
<code>+–∏–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞</code> (–Ω–∞–∑–≤–∞–Ω–∏–µ) - –ù–∞–∑–≤–∞—Ç—å –ª–µ–¥—è–Ω–æ–π –ø–∞—Ç–æ–≥–µ–Ω
<code>-–∏–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞</code> - –°–±—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–∞—Ç–æ–≥–µ–Ω–∞</blockquote>

‚õÑ <b>–û—Å–æ–±—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è:</b>
<code>–∫—É—Å—å</code> (–∞–π–¥–∏/—é–∑–µ—Ä–Ω–µ–π–º) - –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å —Ü–µ–ª—å
<code>–º–æ–∏ –∂–µ—Ä—Ç–≤—ã</code> - –°–ø–∏—Å–æ–∫ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö
<code>–º–æ–∏ —Å–ª–µ—Ç–µ–≤—à–∏–µ</code> - –°–ø–∏—Å–æ–∫ –æ—Ç—Ç–∞—è–≤—à–∏—Ö
<code>–∏–¥</code> (—Ä–µ–ø–ª–∞–π/—Å—Å—ã–ª–∫–∞) - –ö–æ–¥ –≤–æ–ª—à–µ–±–Ω–∏–∫–∞""", parse_mode="HTML")

# –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞
async def is_user_banned(user_id: int) -> bool:
    cursor.execute('SELECT is_banned FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    return bool(result and result[0] == 1)

@dp.message_handler(lambda message: message.text.lower() == "–±–æ—Ç")
async def bot_command(message: types.Message):
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()
    
    if not user_data:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML")
        return
        
    if user_data[1] == 1:
        return
        
    start_time = time.time()
    bot_text = "üéÑ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–∞!"

    sent_message = await message.reply(bot_text)

    response_time = round((time.time() - start_time) * 1000)
    bot_text = (
        f"üéÑ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–∞!\n"
        f"‚îî üß¨ –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏: {response_time} –º—Å"
    )
    await sent_message.edit_text(bot_text)

@dp.message_handler(lambda message: message.text.lower().startswith('–∏–¥'))
async def id_command(message: types.Message):
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()
    
    if not user_data:
        await message.reply("üéÑ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start ‚ùÑÔ∏è", parse_mode="HTML")
        return
        
    if user_data[1] == 1:
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split(maxsplit=1)
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        def format_user_info(user_id: int, username: str = None, is_self: bool = False) -> str:
            user_link = f"@{username}" if username else f'<a href="tg://user?id={user_id}">{user_id}</a>'
            prefix = "–í–∞—à" if is_self else "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            return f"üéÖ {prefix} {user_link}: <code>{user_id}</code>"

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ Telegram —Å—Å—ã–ª–æ–∫
        def extract_user_id_from_link(link: str) -> Optional[int]:
            try:
                if 'tg://user?id=' in link:
                    return int(link.split('=')[1])
                elif 'tg://openmessage?user_id=' in link:
                    return int(link.split('=')[1])
                return None
            except:
                return None

        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–ø–ª–∞–π
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
            username = message.reply_to_message.from_user.username
            await message.reply(format_user_info(user_id, username), parse_mode="HTML")
            return

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if len(args) == 1:
            user_id = message.from_user.id
            username = message.from_user.username
            await message.reply(format_user_info(user_id, username, True), parse_mode="HTML")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        query = args[1].strip()

        # –ï—Å–ª–∏ —ç—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ (@username)
        if query.startswith('@'):
            username = query[1:]
            if not re.match(r'^[a-zA-Z0-9_]{5,32}$', username):
                await message.reply("‚ùÑÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞! üéÑ")
                return
            await message.reply(
                f"üéÑ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query}, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùÑÔ∏è", 
                parse_mode="HTML"
            )
            return

        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ t.me –∏–ª–∏ telegram.me
        if 't.me/' in query or 'telegram.me/' in query:
            username = query.split('/')[-1]
            await message.reply(
                f"üéÑ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùÑÔ∏è", 
                parse_mode="HTML"
            )
            return

        # –ï—Å–ª–∏ —ç—Ç–æ tg:// —Å—Å—ã–ª–∫–∞
        if query.startswith('tg://'):
            user_id = extract_user_id_from_link(query)
            if user_id:
                await message.reply(
                    f"üéÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ: <code>{user_id}</code>", 
                    parse_mode="HTML"
                )
                return
            else:
                await message.reply("‚ùÑÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Å—Å—ã–ª–∫–∏! üéÑ")
                return

        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —é–∑–µ—Ä–Ω–µ–π–º –±–µ–∑ @
        if re.match(r'^[a-zA-Z0-9_]{5,32}$', query):
            await message.reply(
                f"üéÑ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{query}, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùÑÔ∏è", 
                parse_mode="HTML"
            )
            return

        # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ ID)
        if query.isdigit():
            user_id = int(query)
            await message.reply(
                f"üéÖ –£–∫–∞–∑–∞–Ω–Ω—ã–π ID: <code>{user_id}</code>", 
                parse_mode="HTML"
            )
            return

        await message.reply("‚ùÑÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞! üéÑ")

    except Exception as e:
        print(f"Error in id_command: {e}")
        await message.reply("‚ùÑÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞! üéÑ")

# –ö–æ–º–∞–Ω–¥–∞ /reset ‚Äî —Å–±—Ä–æ—Å –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö
@dp.message_handler(lambda message: message.text.lower().startswith('/reset '))
async def reset_user(message: types.Message):
    if message.from_user.id not in [6832369115]:
        return

    args = message.text.split()  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã

    try:
        target_user_id = int(args[1])
    except (IndexError, ValueError):
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç–æ –∑–¥–µ—Å—å
        target_user_id = message.from_user.id  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if len(args) > 1:
        cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (target_user_id,))
        user_exists = cursor.fetchone()

        if not user_exists:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
        cursor.execute('''
            UPDATE users 
            SET bio_experience = 0, 
                bio_resources = 0, 
                pathogens = 4, 
                skill_level = 1, 
                contagion = 1, 
                immunity = 0, 
                virus_skill = 1
            WHERE user_id = ?
        ''', (target_user_id,))
        conn.commit()

        await message.reply(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_user_id} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö.")
    else:
        user_id = message.from_user.id
        cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
        user_exists = cursor.fetchone()

        if not user_exists:
            await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö
        cursor.execute('''
            UPDATE users 
            SET bio_experience = 0, 
                bio_resources = 0, 
                pathogens = 4, 
                skill_level = 1, 
                contagion = 1, 
                immunity = 0, 
                virus_skill = 1
            WHERE user_id = ?
        ''', (user_id,))
        conn.commit()

        await message.reply("‚úÖ –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
def add_missing_columns():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    cursor.execute("PRAGMA table_info(users)")
    existing_columns = [column[1] for column in cursor.fetchall()]

    # –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –±–∞–Ω–∞ —Å –∏—Ö —Ç–∏–ø–∞–º–∏
    columns_to_add = {
        'is_banned': 'INTEGER DEFAULT 0',
        'banned_at': 'TEXT DEFAULT NULL',
        'unbanned_at': 'TEXT DEFAULT NULL',
        'banned_by': 'INTEGER DEFAULT NULL',
        'ban_reason': 'TEXT DEFAULT NULL',
        'ban_end_time': 'TEXT DEFAULT NULL'
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    for column_name, column_type in columns_to_add.items():
        if column_name not in existing_columns:
            try:
                cursor.execute(f"ALTER TABLE users ADD COLUMN {column_name} {column_type}")
            except Exception as e:
                print(f"Error adding column {column_name}: {e}")
    
    conn.commit()

# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
add_missing_columns()

–∏—Å–∫–ª = [1291390143, 6832369115]

def parse_time(time_str: str) -> Optional[timedelta]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á–∏—Å–ª–æ + –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (d/h/m)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç timedelta –∏–ª–∏ None –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
    """
    time_match = re.match(r'(\d+)([dhm])', time_str.lower())
    if not time_match:
        return None
    
    amount = int(time_match.group(1))
    unit = time_match.group(2)
    
    time_units = {
        'd': lambda x: timedelta(days=x),
        'h': lambda x: timedelta(hours=x),
        'm': lambda x: timedelta(minutes=x)
    }
    
    return time_units.get(unit, lambda x: None)(amount)

@dp.message_handler(lambda message: message.text.lower().startswith("–∫–∞—Å"))
async def toggle_ban(message: types.Message):
    if message.from_user.id not in [6832369115, 1291390143]:
        return

    args = message.text.split()
    if len(args) < 2:
        await message.reply("—á–æ—Ç–∞ –Ω–µ —Ç–æ")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ user_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ ID, —Ç–∞–∫ –∏ username)
    target_arg = args[1]
    user_id = None

    if target_arg.isdigit():
        user_id = int(target_arg)
    elif target_arg.startswith('@'):
        username = target_arg[1:]
        cursor.execute('SELECT user_id FROM users WHERE LOWER(username) = LOWER(?)', (username,))
        result = cursor.fetchone()
        if result:
            user_id = result[0]

    if not user_id:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", parse_mode="HTML")
        return

    cursor.execute('SELECT user_id, is_banned, username FROM users WHERE user_id = ?', (user_id,))
    user_data = cursor.fetchone()

    if not user_data:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", parse_mode="HTML")
        return

    moscow_tz = pytz.timezone('Europe/Moscow')
    current_time = datetime.now(moscow_tz)

    # –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_data[1] == 1:
        cursor.execute('''
            UPDATE users 
            SET is_banned = 0, 
                unbanned_at = ?,
                banned_at = NULL,
                ban_reason = NULL,
                banned_by = NULL,
                ban_end_time = NULL
            WHERE user_id = ?
        ''', (current_time.strftime('%Y-%m-%d %H:%M:%S'), user_id))
        conn.commit()

        await message.reply(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {current_time.strftime('%d.%m.%Y %H:%M:%S')} (–ú–°–ö)\n"
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href='tg://openmessage?user_id={message.from_user.id}'>{message.from_user.full_name}</a>", 
            parse_mode="HTML"
        )
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–∏—á–∏–Ω—ã –±–∞–Ω–∞
    time_delta = None
    ban_reason = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    if len(args) > 2:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if any(args[2].lower().endswith(x) for x in ['d', 'h', 'm']):
            time_delta = parse_time(args[2])
            if not time_delta:
                await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 1d, 2h, 30m", parse_mode="HTML")
                return
            ban_reason = " ".join(args[3:]) if len(args) > 3 else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        else:
            ban_reason = " ".join(args[2:])

    ban_end_time = (current_time + time_delta).strftime('%Y-%m-%d %H:%M:%S') if time_delta else None

    cursor.execute('''
        UPDATE users 
        SET is_banned = 1, 
            banned_at = ?,
            ban_end_time = ?,
            ban_reason = ?,
            banned_by = ?,
            unbanned_at = NULL
        WHERE user_id = ?
    ''', (
        current_time.strftime('%Y-%m-%d %H:%M:%S'),
        ban_end_time,
        ban_reason,
        message.from_user.id,
        user_id
    ))
    conn.commit()

    ban_duration = f"–¥–æ {(current_time + time_delta).strftime('%d.%m.%Y %H:%M:%S')} (–ú–°–ö)" if time_delta else "–Ω–∞–≤—Å–µ–≥–¥–∞"

    # –†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–æ-–Ω–æ–≤–æ–≥–æ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply(
        f"üéÑüéÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://openmessage?user_id={user_id}'>–∫–ª–∏–∫</a> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω üéÖüéÑ\n"
        f"‚è∞ –°—Ä–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {ban_duration}\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {ban_reason}\n"
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href='tg://openmessage?user_id={message.from_user.id}'>{message.from_user.full_name}</a>\n",
        parse_mode="HTML"
    )

@dp.message_handler(lambda message: message.text.lower().startswith('/–ø—Ä–∏—á–∏–Ω–∞'))
async def get_ban_reason(message: types.Message):
    
    if message.from_user.id not in [6832369115, 1291390143]:
        return

    try:
        args = message.text.split()
        if len(args) != 2:
            await message.reply(
                "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ø—Ä–∏—á–∏–Ω–∞ <ID> –ü—Ä–∏–º–µ—Ä: /–ø—Ä–∏—á–∏–Ω–∞ 123456", 
                parse_mode="HTML"
            )
            return

        try:
            user_id = int(args[1])
        except ValueError:
            await message.reply("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", parse_mode="HTML")
            return

        cursor.execute('''
            SELECT username, is_banned, ban_reason, banned_at, ban_end_time, banned_by
            FROM users 
            WHERE user_id = ?
        ''', (user_id,))
        
        user_data = cursor.fetchone()

        if not user_data:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", parse_mode="HTML")
            return

        username, is_banned, ban_reason, banned_at, ban_end_time, banned_by = user_data

        if not is_banned:
            await message.reply(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href=tg://openmessage?user_id={user_id}'>{username}</a> –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                parse_mode="HTML"
            )
            return

        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        
        banned_at_moscow = datetime.strptime(banned_at, '%Y-%m-%d %H:%M:%S')
        banned_at_moscow = moscow_tz.localize(banned_at_moscow)
        
        ban_end_str = ""
        if ban_end_time:
            ban_end_moscow = datetime.strptime(ban_end_time, '%Y-%m-%d %H:%M:%S')
            ban_end_moscow = moscow_tz.localize(ban_end_moscow)
            
            if ban_end_moscow > current_time:
                time_left = ban_end_moscow - current_time
                days = time_left.days
                hours = time_left.seconds // 3600
                minutes = (time_left.seconds % 3600) // 60
                
                time_left_str = ""
                if days > 0:
                    time_left_str += f"{days} –¥–Ω. "
                if hours > 0:
                    time_left_str += f"{hours} —á. "
                if minutes > 0:
                    time_left_str += f"{minutes} –º–∏–Ω."
                    
                ban_end_str = f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {time_left_str}\n"
            else:
                ban_end_str = "‚è∞ –°—Ä–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫\n"

        await message.reply(
            f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <a href='tg://openmessage?user_id={user_id}'>{username}</a>:\n\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {ban_reason}\n"
            f"üìÖ –î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {banned_at_moscow.strftime('%d.%m.%Y %H:%M:%S')} (–ú–°–ö)\n"
            f"{ban_end_str}"
            f"üë§ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: <a href='tg://openmessage?user_id={banned_by}'>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</a>",
            parse_mode="HTML"
        )

    except Exception as e:
        print(f"Error in get_ban_reason: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

@dp.message_handler(lambda message: message.text.lower() == "/changelog")
async def changelog_command(message: types.Message):
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()
    
    if not user_data:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML")
        return
        
    if user_data[1] == 1:
        return
        
    changelog = """
üéÑ <b>–°–ø–∏—Å–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b>

1Ô∏è‚É£ –£–∫—Ä–∞—à–µ–Ω –±–∏–æ—Ç–æ–ø –¥–ª—è –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–π —Ç–µ–º–∞—Ç–∏–∫–∏ üéÖ
2Ô∏è‚É£ –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–µ–º–∏–∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–æ üéÅ
3Ô∏è‚É£ –ö–æ–º–∞–Ω–¥–∞ "–∫—É—Å—å" –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.

‚ùÑÔ∏è <b>–¢–µ–∫—É—â–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ.

<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 27.12.2024</i>
"""
    await message.reply(changelog, parse_mode="HTML")

@dp.message_handler(lambda message: message.text.lower().startswith('/set'))
async def set_user_attributes(message: types.Message):
    if message.from_user.id not in [6832369115, 1291390143]:
        return
    
    attribute_mapping = {
    'be': 'bio_experience',
    'br': 'bio_resources',
    'skill': 'skill_level',
    'inf': 'contagion',
    'imn': 'immunity',
    'virus': 'virus_skill',
    'p': 'pathogens',
    'mp': 'max_pathogens',
    'q': 'qualification',
    'm': 'lethality'
    }

    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
        
        user_id = int(parts[1])  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        updates = parts[2]       # –°—Ç—Ä–æ–∫–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: "be 100, br 200"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
        cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
        if not cursor.fetchone():
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –†–∞–∑–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_pairs = updates.split(',')
        for pair in update_pairs:
            short_attr, value = pair.strip().split()
            if short_attr not in attribute_mapping:
                await message.reply(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∞—Ç—Ä–∏–±—É—Ç: {short_attr}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {', '.join(attribute_mapping.keys())}")
                return
            
            attribute = attribute_mapping[short_attr]
            value = int(value)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞
            cursor.execute(f'UPDATE users SET {attribute} = ? WHERE user_id = ?', (value, user_id))
        
        conn.commit()

        await message.reply(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}:\n",
            parse_mode="HTML"
        )
    except ValueError as ve:
        await message.reply(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: {ve}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set <–∞–π–¥–∏> <–∞—Ç—Ä–∏–±—É—Ç> <–∑–Ω–∞—á–µ–Ω–∏–µ>, <–∞—Ç—Ä–∏–±—É—Ç> <–∑–Ω–∞—á–µ–Ω–∏–µ>, ...")
    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@dp.message_handler(lambda message: message.text.lower() == "/help")
async def help_command(message: types.Message):
    if message.from_user.id not in [6832369115, 1291390143]:
        return
        
        help_text = """
üõ†Ô∏è <b>–ü–æ–º–æ—â—å –ø–æ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞–º:</b>

<b>–ö–æ–º–∞–Ω–¥–∞ /set (id) (–ø–∞—Ä–∞–º–µ—Ç—Ä) (–∑–Ω–∞—á–µ–Ω–∏–µ):</b>
‚îî –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
 ‚Ä¢ <code>be</code> - –±–∏–æ:–æ–ø—ã—Ç
 ‚Ä¢ <code>br</code> - –±–∏–æ-—Ä–µ—Å—É—Ä—Å—ã
 ‚Ä¢ <code>skill</code> - –Ω–∞–≤—ã–∫
 ‚Ä¢ <code>inf</code> - –∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å
 ‚Ä¢ <code>imn</code> - –∏–º–º—É–Ω–∏—Ç–µ—Ç
 ‚Ä¢ <code>virus</code> - –≤–∏—Ä—É—Å
 ‚Ä¢ <code>m</code> - –ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å
 ‚Ä¢ <code>q</code> - –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
 ‚Ä¢ <code>p</code> - –ø–∞—Ç–æ–≥–µ–Ω
 ‚Ä¢ <code>mp</code> - –º–∞–∫—Å–∏–º—É–º –ø–∞—Ç–æ–≥–µ–Ω–æ–≤
‚îî –ü—Ä–∏–º–µ—Ä: <code>/set 123456789 be 100</code>
<b>–ö–æ–º–∞–Ω–¥–∞ /i:</b>
‚îî –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
‚Ä¢ <code>/i</code> - –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
 ‚Ä¢ <code>be</code> - –±–∏–æ-–æ–ø—ã—Ç
 ‚Ä¢ <code>br</code> - –±–∏–æ-—Ä–µ—Å—É—Ä—Å—ã
 ‚Ä¢ <code>skill</code> - –Ω–∞–≤—ã–∫
 ‚Ä¢ <code>inf</code> - –∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å
 ‚Ä¢ <code>imn</code> - –∏–º–º—É–Ω–∏—Ç–µ—Ç
 ‚Ä¢ <code>virus</code> - –≤–∏—Ä—É—Å
 ‚Ä¢ <code>m</code> - –ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å
 ‚Ä¢ <code>q</code> - –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
 ‚Ä¢ <code>p</code> - –ø–∞—Ç–æ–≥–µ–Ω
 ‚Ä¢ <code>mp</code> - –º–∞–∫—Å–∏–º—É–º –ø–∞—Ç–æ–≥–µ–Ω–æ–≤
 ‚îî –ü—Ä–∏–º–µ—Ä: <code>/i 123456789 be, br</code>
<b>–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>–∫–∞—Å</code> (id) (time) - –≤—ã–¥–∞–µ—Ç –±–∞–Ω
‚îî –ü—Ä–∏–º–µ—Ä: <code>–∫–∞—Å 123456789 1d –ø—Ä–∏—á–∏–Ω–∞</code>

‚Ä¢ <code>/reset</code> (id) - —Å–±—Ä–æ—Å –Ω–∞–≤—ã–∫–æ–≤
‚Ä¢ <code>/bioexp</code> - —Å—É–º–º–∞—Ä–Ω—ã–π –æ–ø—ã—Ç –∏–≥—Ä—ã
‚Ä¢ <code>/–ª–∏—Å—Ç</code> - –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ <code>/rlab</code> - —Å–±—Ä–æ—Å –∏–º–µ–Ω–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
‚Ä¢ <code>/rpat</code> - —Å–±—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–∞—Ç–æ–≥–µ–Ω–∞

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/lab</code> (reply/id) - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ <code>/info</code> - –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ <code>/i</code> - —Å–ª—É—á–∞–π–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ <code>/–ø–∞—Ç—ã</code> - —Å–ø–∏—Å–æ–∫ –ø–∞—Ç–æ–≥–µ–Ω–æ–≤

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: 24.12.2024</i>
"""
    await message.reply(help_text, parse_mode="HTML")

@dp.message_handler(lambda message: message.text.startswith("/lab"))
async def lab_full_report(message: types.Message):
    if message.from_user.id not in [6832369115]:
        return

    try:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ä–µ–ø–ª–∞–µ–º
        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
            target_id = target_user.id
            if target_user.is_bot:
                await message.reply("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.")
                return
        else:
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å ID –≤ —Ç–µ–∫—Å—Ç–µ
            parts = message.text.split()
            if len(parts) < 2 or not parts[1].isdigit():
                await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ —Ä–µ–ø–ª–∞–π.")
                return
            target_id = int(parts[1])

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            SELECT username, bio_experience, bio_resources, skill_level, contagion, immunity, 
                   virus_skill, lethality, qualification, pathogens, max_pathogens, pathogen_name, 
                   lab_name, registration_date
            FROM users WHERE user_id = ?
        ''', (target_id,))
        user_data = cursor.fetchone()

        if not user_data:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        (username, bio_experience, bio_resources, skill_level, contagion, immunity, virus_skill, 
         lethality, qualification, pathogens, max_pathogens, pathogen_name, lab_name, registration_date) = user_data

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—Ä–∞–∂–µ–Ω–∏–π
        cursor.execute('SELECT COUNT(*) FROM infected WHERE user_id = ?', (target_id,))
        total_victims = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(*) FROM fallen_victims WHERE user_id = ?', (target_id,))
        total_fallen_victims = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(*) FROM infections WHERE attacker_id = ?', (target_id,))
        total_infections = cursor.fetchone()[0]

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        lab_report = f"""
üî¨ <i>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</i> <b>{username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}</b>
<b>[–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ]</b><blockquote>
üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {registration_date}
‚ò£Ô∏è <b>–ü–∞—Ç–æ–≥–µ–Ω:</b> {pathogen_name or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üè¢ <b>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è:</b> {lab_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</blockquote>

<b>[–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏]</b><blockquote>
üéöÔ∏è <b>–£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–æ–≤:</b> {skill_level}
ü¶† <b>–ó–∞—Ä–∞–∑–Ω–æ—Å—Ç—å:</b> {contagion}
üõ°Ô∏è <b>–ò–º–º—É–Ω–∏—Ç–µ—Ç:</b> {immunity}
üß™ <b>–£—Ä–æ–≤–µ–Ω—å –≤–∏—Ä—É—Å–∞:</b> {virus_skill}
‚ò†Ô∏è <b>–õ–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å:</b> {lethality}
üõ†Ô∏è <b>–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {qualification}</blockquote>

<b>[–†–µ—Å—É—Ä—Å—ã]</b>
<blockquote>üß¨ <b>–ë–∏–æ —Ä–µ—Å—É—Ä—Å—ã:</b> {bio_resources}
üéñÔ∏è <b>–ë–∏–æ –æ–ø—ã—Ç:</b> {bio_experience}
ü¶† <b>–ü–∞—Ç–æ–≥–µ–Ω—ã:</b> {pathogens}/{max_pathogens}</blockquote>

<b>[–ó–∞—Ä–∞–∂–µ–Ω–∏—è]</b>
<blockquote>üîó <b>–í—Å–µ–≥–æ –∑–∞—Ä–∞–∂–µ–Ω–∏–π:</b> {total_infections}
ü¶† <b>–í—Å–µ–≥–æ –∂–µ—Ä—Ç–≤:</b> {total_victims}
üíÄ <b>–°–ª–µ—Ç–µ–≤—à–∏–µ –∂–µ—Ä—Ç–≤—ã:</b> {total_fallen_victims}</blockquote>
"""
        await message.reply(lab_report, parse_mode="HTML")

    except Exception as e:
        print(e)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")


@dp.message_handler(lambda message: message.text.startswith("/info"))
async def user_info(message: types.Message):
    if message.from_user.id not in [6832369115]:
        return

    try:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ä–µ–ø–ª–∞–µ–º
        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
            target_id = target_user.id
            if target_user.is_bot:
                await message.reply("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.", parse_mode="HTML")
                return
            target_nickname = target_user.first_name  # –ù–∏–∫–Ω–µ–π–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å ID –≤ —Ç–µ–∫—Å—Ç–µ
            parts = message.text.split()
            if len(parts) < 2 or not parts[1].isdigit():
                await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ —Ä–µ–ø–ª–∞–π.", parse_mode="HTML")
                return
            target_id = int(parts[1])

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
            cursor.execute('SELECT first_name FROM users WHERE user_id = ?', (target_id,))
            user_data = cursor.fetchone()

            if not user_data:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
                return

            target_nickname = user_data[0]  # –ù–∏–∫–Ω–µ–π–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            SELECT username, registration_date, pathogen_name, lab_name 
            FROM users WHERE user_id = ?
        ''', (target_id,))
        user_data = cursor.fetchone()

        if not user_data:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
            return

        username, registration_date, pathogen_name, lab_name = user_data

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        info_message = f"""
üîç <i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</i>

<b>üìõ –ù–∏–∫–Ω–µ–π–º:</b> {target_nickname}
<b>üÜî ID:</b> {target_id}
<b>üë§ –Æ–∑–µ—Ä–Ω–µ–π–º:</b> {username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {registration_date}
<b>‚ò£Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ç–æ–≥–µ–Ω–∞:</b> {pathogen_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
<b>üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏:</b> {lab_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
"""
        await message.reply(info_message, parse_mode="HTML")

    except Exception as e:
        print(e)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.", parse_mode="HTML")

@dp.message_handler(lambda message: message.text.startswith("/i"))
async def user_skill_info(message: types.Message):
    if message.from_user.id not in [6832369115]:
        return
    
    args = message.text.split()

    if len(args) < 3:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /i <ID –∏–ª–∏ —Ä–µ–ø–ª–∞–π> <–Ω–∞–≤—ã–∫>", parse_mode="HTML")
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞
    target = args[1]
    skill_name = args[2].lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞
    valid_skills = [
        "be", "bio_experience", "br", "bio_resources", "skill", "skill_level", "inf", "contagion",
        "imn", "immunity", "virus", "virus_skill", "m", "lethality", "q", "qualification", "p", "pathogens",
        "mp", "max_pathogens", "pn", "pathogen_name", "ln", "lab_name"
    ]

    if skill_name not in valid_skills:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: " + ", ".join(valid_skills), parse_mode="HTML")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ä–µ–ø–ª–∞–µ–º –∏–ª–∏ —Å ID)
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
        target_id = target_user.id
    elif target.isdigit():
        target_id = int(target)
    else:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ —Ä–µ–ø–ª–∞–π.", parse_mode="HTML")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    cursor.execute('''
        SELECT bio_experience, bio_resources, skill_level, contagion, immunity, virus_skill,
               lethality, qualification, pathogens, max_pathogens, pathogen_name, lab_name
        FROM users WHERE user_id = ?
    ''', (target_id,))
    user_data = cursor.fetchone()

    if not user_data:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
        return

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —Å –ø–æ–ª—è–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    skill_mapping = {
        "be": 0, "bio_experience": 0, "br": 1, "bio_resources": 1, "s": 2, "skill_level": 2,
        "inf": 3, "contagion": 3, "imn": 4, "immunity": 4, "virus": 5, "virus_skill": 5, "letal": 6,
        "lethality": 6, "q": 7, "qualification": 7, "p": 8, "pathogens": 8, "mp": 9,
        "max_pathogens": 9, "pn": 10, "pathogen_name": 10, "ln": 11, "lab_name": 11
    }

    skill_index = skill_mapping.get(skill_name)

    if skill_index is None:
        await message.reply("‚ùå –ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
        return

    skill_value = user_data[skill_index]

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.reply(f"üîç <b>–ù–∞–≤—ã–∫</b>: <i>{skill_name}</i>\n<b>–ó–Ω–∞—á–µ–Ω–∏–µ:</b> {skill_value}", parse_mode="HTML")

@dp.message_handler(lambda message: message.text.lower().startswith("—á–µ–∫"))
async def check_user(message: types.Message):
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()
    
    if not user_data:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML")
        return
        
    if user_data[1] == 1:
        return
        
    current_time = datetime.utcnow()
    
    args = message.text.split()
    if len(args) < 2:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID, —Å—Å—ã–ª–∫—É, –∏–ª–∏ @username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", parse_mode="HTML")
        return

    target = args[1]

    def get_user_id(target):
        if target.startswith('https://t.me/'):
            return target.split('/')[-1]
        if target.startswith('@'):
            return target[1:]
        if target.isdigit():
            return int(target)
        return None

    target_user = get_user_id(target)

    if not target_user:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID, —Å—Å—ã–ª–∫—É –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º.", parse_mode="HTML")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if isinstance(target_user, int):
        cursor.execute('SELECT user_id, username, bio_experience FROM users WHERE user_id = ?', (target_user,))
    else:
        cursor.execute('SELECT user_id, username, bio_experience FROM users WHERE username = ?', (target_user,))
    
    user = cursor.fetchone()
    if not user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
        return

    user_id, username, current_bio_exp = user

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞—Ä–∞–∂–µ–Ω–∏–∏
    cursor.execute('''
        SELECT victim_experience, infect_end_date
        FROM infected
        WHERE victim_id = ?
        ORDER BY infect_date DESC
        LIMIT 1
    ''', (user_id,))
    infection_info = cursor.fetchone()

    if infection_info:
        last_infection_exp, infect_end_date = infection_info
        
        current_infection_exp = max(1, int(current_bio_exp * 0.1))
        total_exp = last_infection_exp + current_infection_exp

        if infect_end_date:
            infect_end_time = datetime.strptime(infect_end_date, '%Y-%m-%d %H:%M:%S')
            
            if infect_end_time > current_time:
                response = (f"üçä <a href='tg://openmessage?user_id={user_id}'>{username}</a> "
                          f"–ø—Ä–∏–Ω–æ—Å–∏—Ç {current_infection_exp:,} –æ–ø—ã—Ç–∞\n"
                          f"–∑–∞—Ä–∞–∂–µ–Ω–∏–µ –¥–æ: {infect_end_date}")
                
                await message.reply(response, parse_mode="HTML")
            else:
                await message.reply("‚ùå –ó–∞—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", parse_mode="HTML")
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞—Ä–∞–∂–µ–Ω–∏—è.", parse_mode="HTML")
    else:
        current_infection_exp = max(1, int(current_bio_exp * 0.1))
        await message.reply(
            f"üçä <a href='tg://openmessage?user_id={user_id}'>{username}</a> –ø—Ä–∏–Ω–æ—Å–∏—Ç {current_infection_exp:,} –æ–ø—ã—Ç–∞",
            parse_mode="HTML"
        )

@dp.message_handler(lambda message: message.text.lower() == "/–ø–∞—Ç—ã")
async def show_recent_pathogens(message: types.Message):
    if message.from_user.id not in [6832369115]:
    	return
    cursor.execute('SELECT user_id, is_banned FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()
    
    if not user_data:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML")
        return
        
    if user_data[1] == 1:
        await message.reply("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.", parse_mode="HTML")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞—Ç–æ–≥–µ–Ω–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ä–∞–≤–Ω—ã "–∫–æ—Ç—è—á–∫–∞"
        cursor.execute('''
            SELECT u.user_id, u.pathogen_name, u.username 
            FROM users u
            WHERE u.pathogen_name IS NOT NULL 
            AND u.pathogen_name != "–∫–æ—Ç—è—á–∫–∞"
            ORDER BY u.user_id DESC
            LIMIT 50
        ''')
        pathogens = cursor.fetchall()

        # –ï—Å–ª–∏ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ç–æ–≥–µ–Ω–æ–≤
        if not pathogens:
            await message.answer("üìù –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ç–æ–≥–µ–Ω–æ–≤", parse_mode="HTML")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–∞—Ç–æ–≥–µ–Ω–∞–º–∏
        response = "üß¨ <b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç–æ–≥–µ–Ω—ã:</b>\n\n"
        for user_id, pathogen_name, username in pathogens:
            user_link = f"@{username}" if username else f'<a href="tg://openmessage?user_id={user_id}">{user_id}</a>'
            response += f"{user_link} - {pathogen_name}\n"

        await message.answer(response, parse_mode="HTML")

    except Exception as e:
        print(f"Error in show_recent_pathogens: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.", parse_mode="HTML")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
